{
  "Create Entry": {
    "prefix": "tce",
    "body": [
      "import { config, Tolerance, EnvSystem } from '@turbox3d/turbox';",
      "import * as ReactDOM from 'react-dom';",
      "import * as React from 'react';",
      "",
      "config({",
      "  middleware: {",
      "    logger: process.env.NODE_ENV !== 'production', // 默认在 dev 环境开启 logger 中间件，在生产环境关闭",
      "    diffLogger: true, // 默认开启 log 状态的 diff 信息",
      "    effect: false, // 默认关闭 effect 中间件",
      "    perf: process.env.NODE_ENV !== 'production', // 默认在 dev 环境开启 perf 中间件，性能分析用，在生产环境关闭",
      "    skipNestLog: true, // 默认开启跳过被嵌套的 mutation 执行的日志",
      "    skipNestPerfLog: true, // 默认开启跳过被嵌套的 mutation 执行的性能日志",
      "  },",
      "  timeTravel: {",
      "    isActive: false, // 是否激活时间旅行器，该配置的优先级为最高，关闭时所有可产生历史记录的操作都不会被记录",
      "    maxStepNumber: 20, // 记录操作的最大步数",
      "    isNeedRecord: false, // 所有属性状态是否需要被记录的全局配置，默认全不记录（注意：只针对属性）",
      "    keepActionChain: process.env.NODE_ENV !== 'production', // 默认开启保存 actionChain 到撤销恢复栈中，在生产环境关闭",
      "  },",
      "  disableReactive: false, // 是否禁用响应式",
      "  strictMode: process.env.NODE_ENV !== 'production', // 严格模式，开启非法赋值检测，默认在 dev 环境开启，生产环境关闭",
      "  devTool: false, // 默认关闭 devTool，在生产环境自动关闭",
      "});",
      "",
      "const TOLERANCE = 1e-3;",
      "Tolerance.setGlobal(TOLERANCE, TOLERANCE, TOLERANCE);",
      "",
      "appStore.document.createHistory(20);",
      "appStore.document.applyHistory();",
      "",
      "EnvSystem.AppEnvMgr.switchAppEnv('app-env');",
      "",
      "ReactDOM.render(",
      "  <>",
      "    <MainScene />",
      "    <LeftPanel />",
      "  </>,",
      "  document.getElementById('app')",
      ");",
      ""
    ],
    "description": "Create Entry"
  },
  "Create Domain": {
    "prefix": "tcd",
    "body": [
      "import { Domain, reactor, mutation } from '@turbox3d/turbox';",
      "",
      "export class ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}Domain} extends Domain {",
      "\t@reactor() example = '';",
      "",
      "\t@mutation()",
      "\tupdateExample(example) {",
      "\t\tthis.example = example;",
      "\t}",
      "}",
      ""
    ],
    "description": "Create Domain"
  },
  "Create Reactor": {
    "prefix": "tcr",
    "body": [
      "@reactor() ${1:state} = ${0:initValue};"
    ],
    "description": "Create Reactor"
  },
  "Update State": {
    "prefix": "tus",
    "body": [
      "this.\\$update({$0});"
    ],
    "description": "Update State"
  },
  "Create Mutation": {
    "prefix": "tcm",
    "body": [
      "@mutation()",
      "${1:updateState}(${2:newState}) {",
      "\tthis.${3:state} = ${2:newState};",
      "}"
    ],
    "description": "Create Mutation"
  },
  "Create Computed": {
    "prefix": "tcc",
    "body": [
      "@computed()",
      "get ${1:computedProp}() {",
      "\treturn this.${2:newState};",
      "}"
    ],
    "description": "Create Computed"
  },
  "Create Computed Function": {
    "prefix": "tccf",
    "body": [
      "const computedProp = computed(() => {",
      "\treturn this.firstName + ' ' + this.lastName;",
      "}, {",
      "\tlazy: true,",
      "});"
    ],
    "description": "Create Computed Function"
  },
  "Create Reactive Class Component": {
    "prefix": "tcrcc",
    "body": [
      "import React, { Component } from 'react';",
      "import { ReactiveReact } from '@turbox3d/turbox';",
      "",
      "@ReactiveReact()",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t);",
      "\t}",
      "}",
      ""
    ],
    "description": "Create Reactive Class Component"
  },
  "Create Reactive Function Component": {
    "prefix": "tcrfc",
    "body": [
      "import React from 'react';",
      "import { ReactiveReact } from '@turbox3d/turbox';",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = ReactiveReact(() => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t);",
      "});",
      ""
    ],
    "description": "Create Reactive Function Component"
  },
  "Create Reactive PureComponent": {
    "prefix": "tcrpc",
    "body": [
      "import React, { PureComponent } from 'react';",
      "import { ReactiveReact } from '@turbox3d/turbox';",
      "",
      "@ReactiveReact()",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t);",
      "\t}",
      "}",
      ""
    ],
    "description": "Create Reactive PureComponent"
  },
  "Create Reactive Function": {
    "prefix": "tcrf",
    "body": [
      "import { reactive } from '@turbox3d/turbox';",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = reactive(() => {",
      "\t$0",
      "});",
      ""
    ],
    "description": "Create Reactive Function"
  },
  "Create Middleware": {
    "prefix": "tcmw",
    "body": [
      "export const ${1:${TM_FILENAME_BASE/(-)(\\w+)(\\..+)?/${2:/capitalize}/g}Middleware} = ({ dispatch }) => (next) => (action) => {",
      "\t$0",
      "\treturn next(action);",
      "};",
      ""
    ],
    "description": "Create Middleware"
  },
  "Create Reactive Interactive Mesh3D": {
    "prefix": "tcrim3",
    "body": [
      "import { IViewEntity, Reactive, Mesh3D, MathUtils, Element, EntityObject, createElement } from '@turbox3d/turbox';",
      "",
      "export interface I${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}ViewEntity}Props extends IViewEntity {",
      "  model: EntityObject;",
      "}",
      "",
      "@Reactive",
      "export class ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}ViewEntity} extends Mesh3D<I${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}ViewEntity}Props> {",
      "  protected isInteractive = true;",
      "  protected reactivePipeLine = [this.updatePosition, this.updateRotation, this.updateScale];",
      "",
      "  // protected getViewEntity() {",
      "  //   return {",
      "  //     id: this.props.model.id,",
      "  //     type: ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}Symbol},",
      "  //   };",
      "  // }",
      "",
      "  render() {",
      "    const { model } = this.props;",
      "    const views: Element[] = [];",
      "    views.push(",
      "      createElement(${3:ExampleMesh3D}, {",
      "        model,",
      "      }),",
      "    );",
      "    return views;",
      "  }",
      "",
      "  private updatePosition() {",
      "    const { model } = this.props;",
      "    this.view.position.set(model.position.x, model.position.y, model.position.z);",
      "  }",
      "",
      "  private updateRotation() {",
      "    const { model } = this.props;",
      "    this.view.rotation.set(",
      "      model.rotation.x * MathUtils.DEG2RAD,",
      "      model.rotation.y * MathUtils.DEG2RAD,",
      "      model.rotation.z * MathUtils.DEG2RAD",
      "    );",
      "  }",
      "",
      "  private updateScale() {",
      "    const { model } = this.props;",
      "    this.view.scale.set(model.scale.x, model.scale.y, model.scale.z);",
      "  }",
      "}",
      ""
    ],
    "description": "Create Reactive Interactive Mesh3D"
  },
  "Create Reactive Interactive Mesh2D": {
    "prefix": "tcrim2",
    "body": [
      "import { IViewEntity, Reactive, Mesh2D, MathUtils, Element, EntityObject, createElement } from '@turbox3d/turbox';",
      "",
      "export interface I${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}ViewEntity}Props extends IViewEntity {",
      "  model: EntityObject;",
      "}",
      "",
      "@Reactive",
      "export class ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}ViewEntity} extends Mesh2D<I${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}ViewEntity}Props> {",
      "  protected isInteractive = true;",
      "  protected reactivePipeLine = [this.updatePosition, this.updateRotation, this.updateScale];",
      "",
      "  // protected getViewEntity() {",
      "  //   return {",
      "  //     id: this.props.model.id,",
      "  //     type: ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}Symbol},",
      "  //   };",
      "  // }",
      "",
      "  render() {",
      "    const { model } = this.props;",
      "    const views: Element[] = [];",
      "    views.push(",
      "      createElement(${3:ExampleMesh2D}, {",
      "        model,",
      "      }),",
      "    );",
      "    return views;",
      "  }",
      "",
      "  private updatePosition() {",
      "    const { model } = this.props;",
      "    this.view.position.set(model.position.x, model.position.y);",
      "  }",
      "",
      "  private updateRotation() {",
      "    const { model } = this.props;",
      "    this.view.rotation = model.rotation.z * MathUtils.DEG2RAD;",
      "  }",
      "",
      "  private updateScale() {",
      "    const { model } = this.props;",
      "    this.view.scale.set(model.scale.x, model.scale.y);",
      "  }",
      "}",
      ""
    ],
    "description": "Create Reactive Interactive Mesh2D"
  },
  "Create Reactive Graphic Component": {
    "prefix": "tcrgc",
    "body": [
      "import { Reactive, Component, createElement } from '@turbox3d/turbox';",
      "",
      "@Reactive",
      "export class ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}Component} extends Component {",
      "  render() {",
      "    return [",
      "      createElement(${3:ExampleComponent}, {",
      "        ${4:p1}: ${5:v1},",
      "      }),",
      "    ];",
      "  }",
      "}",
      ""
    ],
    "description": "Create Reactive Graphic Component"
  },
  "Create Mesh3D": {
    "prefix": "tcm3",
    "body": [
      "import { EntityObject, Mesh3D } from '@turbox3d/turbox';",
      "",
      "export interface I${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}3D}Props {",
      "  model: EntityObject;",
      "}",
      "",
      "export class ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}3D} extends Mesh3D<I${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}3D}Props> {",
      "  protected reactivePipeLine = [this.updateMaterial, this.updateGeometry, this.updateRenderOrder];",
      "",
      "  private updateMaterial() {",
      "  }",
      "",
      "  private updateGeometry() {",
      "  }",
      "",
      "  private updateRenderOrder() {",
      "  }",
      "}",
      ""
    ],
    "description": "Create Mesh3D"
  },
  "Create Mesh2D": {
    "prefix": "tcm2",
    "body": [
      "import { EntityObject, Mesh2D } from '@turbox3d/turbox';",
      "",
      "export interface I${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}2D}Props {",
      "  model: EntityObject;",
      "}",
      "",
      "export class ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}2D} extends Mesh2D<I${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}2D}Props> {",
      "  protected reactivePipeLine = [this.updateMaterial, this.updateGeometry, this.updateRenderOrder];",
      "",
      "  private updateMaterial() {",
      "  }",
      "",
      "  private updateGeometry() {",
      "  }",
      "",
      "  private updateRenderOrder() {",
      "  }",
      "}",
      ""
    ],
    "description": "Create Mesh2D"
  },
  "Create ViewEntity Element": {
    "prefix": "tcve",
    "body": [
      "createElement(${1:ProductViewEntity}, {",
      "  type: ${2:ProductSymbol},",
      "  id: ${3:entity.id},",
      "  model: ${4:entity},",
      "  key: ${5:entity.id},",
      "}),"
    ],
    "description": "Create ViewEntity Element"
  },
  "Create Mesh Element": {
    "prefix": "tcme",
    "body": [
      "createElement(${1:Rect3d}, {",
      "  ${2:width}: ${3:hotArea},",
      "  ${4:height}: ${5:hotArea},",
      "}),"
    ],
    "description": "Create Mesh Element"
  },
  "Create CommandBox": {
    "prefix": "tccb",
    "body": [
      "import { BaseCommandBox } from '@turbox3d/turbox';",
      "import { DefaultCommand } from './default';",
      "",
      "class AppCommandBox extends BaseCommandBox {",
      "  defaultCommand = new DefaultCommand(this);",
      "",
      "  constructor() {",
      "    super();",
      "    this.defaultCommand.apply();",
      "  }",
      "",
      "  disposeAll() {",
      "    this.defaultCommand.select.clearAllSelected();",
      "    this.defaultCommand.dispose();",
      "  }",
      "}",
      "",
      "export const appCommandBox = new AppCommandBox();",
      ""
    ],
    "description": "Create CommandBox"
  },
  "Create Composed Command": {
    "prefix": "tccc",
    "body": [
      "import { compose, SelectionCommand, HintCommand } from '@turbox3d/turbox';",
      "",
      "export class ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}Command} extends compose({",
      "  hint: HintCommand,",
      "  select: SelectionCommand,",
      "}) {",
      "  active() {",
      "    this.select.active({",
      "      hint: this.hint,",
      "    });",
      "    this.hint.active(this.select);",
      "  }",
      "}",
      ""
    ],
    "description": "Create Composed Command"
  },
  "Create BaseCommand": {
    "prefix": "tcbc",
    "body": [
      "import { BaseCommand, IViewEntity, SceneEvent, ITool, Action, Vec3 } from '@turbox3d/turbox';",
      "",
      "export class ${1:${TM_FILENAME_BASE/(-|^)(\\w+)(\\..+)?/${2:/capitalize}/g}Command} extends BaseCommand {",
      "  private action = Action.create('${2:action}');",
      "",
      "  protected onDragStart(viewEntity: IViewEntity, event: SceneEvent, tools: ITool) {",
      "    const scenePosition = event.getScenePosition(0) as Vec3;",
      "    this.action.execute(() => {",
      "",
      "    });",
      "  }",
      "",
      "  protected onDragMove(viewEntity: IViewEntity, event: SceneEvent, tools: ITool) {",
      "    const scenePosition = event.getScenePosition(0) as Vec3;",
      "    this.action.execute(() => {",
      "      ",
      "    });",
      "  }",
      "",
      "  protected onDragEnd() {",
      "    this.action.complete();",
      "  }",
      "}",
      ""
    ],
    "description": "Create BaseCommand"
  }
}
